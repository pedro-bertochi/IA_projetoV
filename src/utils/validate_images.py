# src/utils/validate_images.py

import os
import shutil
from PIL import Image # Pillow library
# import imghdr # Para verificar o tipo de arquivo de imagem

# --- Configura√ß√µes ---
# Diret√≥rio principal onde suas imagens est√£o (ex: image/treinamento)
DATA_DIR = 'C:\\cod\\python\\AI\\image\\treinamento'

# Diret√≥rio para onde as imagens inv√°lidas ser√£o movidas
QUARANTINE_DIR = 'C:\\cod\\python\\AI\\image\\quarentena_imagens_invalidas'

# Tipos de arquivos de imagem esperados (min√∫sculas)
EXPECTED_EXTENSIONS = ('.jpg', '.jpeg', '.png', '.bmp', '.gif')

# --- Fun√ß√µes ---
def is_valid_image(filepath):
    """
    Verifica se um arquivo √© uma imagem v√°lida e de um tipo esperado,
    utilizando a biblioteca Pillow, com valida√ß√£o MENOS RESTRITA.
    Retorna True se for v√°lido, False caso contr√°rio, e uma mensagem.
    """
    try:
        # 1. Verifica se a extens√£o √© esperada
        file_extension = os.path.splitext(filepath)[1].lower()
        if file_extension not in EXPECTED_EXTENSIONS:
            return False, f"Extens√£o inesperada: {file_extension}. Esperado: {EXPECTED_EXTENSIONS}"

        # 2. Tenta abrir com PIL
        # Apenas abre o arquivo. Se esta linha n√£o der erro, o Pillow conseguiu ler o cabe√ßalho.
        with Image.open(filepath) as img:
            # img.verify() # <--- ESTA LINHA FOI COMENTADA/REMOVIDA para relaxar a valida√ß√£o
            # img.load()   # Opcional: Descomente esta linha APENAS SE AINDA HOUVER PROBLEMAS
            #              # depois de comentar img.verify(). img.load() for√ßa a leitura de pixels
            #              # e pode revelar problemas mais profundos (mas √© mais lento).
            pass # Mant√©m um pass se img.verify() for comentado/removido

        return True, "Imagem v√°lida (aberta com Pillow sem verifica√ß√£o estrita)"
    except (IOError, SyntaxError, Image.UnidentifiedImageError, OSError, ValueError) as e:
        # Captura erros comuns de imagem corrompida, formato inv√°lido, ou erro de IO/descompress√£o.
        return False, f"Erro ao abrir imagem com Pillow: {e}"
    except Exception as e:
        # Captura outros erros inesperados.
        return False, f"Erro inesperado durante valida√ß√£o: {e}"


def validate_and_quarantine_images(data_dir, quarantine_dir):
    """
    Percorre todas as imagens em data_dir, valida-as e move as inv√°lidas
    para um diret√≥rio de quarentena.
    """
    os.makedirs(quarantine_dir, exist_ok=True)
    
    invalid_images_count = 0
    total_images_checked = 0
    
    print(f"Iniciando valida√ß√£o de imagens em: {os.path.abspath(data_dir)}")
    print(f"Imagens inv√°lidas ser√£o movidas para: {os.path.abspath(quarantine_dir)}")

    for root, _, files in os.walk(data_dir):
        for file_name in files:
            total_images_checked += 1
            filepath = os.path.join(root, file_name)
            
            is_valid, message = is_valid_image(filepath)
            
            if not is_valid:
                invalid_images_count += 1
                print(f"üö´ Imagem INV√ÅLIDA encontrada: {filepath} - Raz√£o: {message}")
                
                # Mover para quarentena
                relative_path = os.path.relpath(filepath, data_dir)
                quarantine_filepath = os.path.join(quarantine_dir, relative_path)
                
                # Criar diret√≥rio de destino na quarentena se n√£o existir
                os.makedirs(os.path.dirname(quarantine_filepath), exist_ok=True)
                
                try:
                    shutil.move(filepath, quarantine_filepath)
                    print(f"   -> Movida para quarentena: {quarantine_filepath}")
                except Exception as e:
                    print(f"   -> ERRO ao mover para quarentena {filepath}: {e}")

    print("\n--- Valida√ß√£o Conclu√≠da ---")
    print(f"Total de imagens verificadas: {total_images_checked}")
    print(f"Imagens inv√°lidas encontradas e movidas para quarentena: {invalid_images_count}")
    if invalid_images_count > 0:
        print("Por favor, inspecione a pasta de quarentena para verificar as imagens problem√°ticas.")
    else:
        print("‚úÖ Todas as imagens parecem v√°lidas e foram mantidas no local.")

# --- Bloco de Execu√ß√£o Principal ---
if __name__ == "__main__":
    validate_and_quarantine_images(DATA_DIR, QUARANTINE_DIR)